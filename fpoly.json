{
  "meta": { "generator": "0.9.0", "format": 20, "date": 1568677922309 },
  "custom": {
    "general": {
      "name": "General",
      "files": {
        "welcome": {
          "name": "Welcome",
          "type": "md",
          "content": "# Collection\n\nUtility data structure used in Discord.js.\n",
          "path": "docs/general/welcome.md"
        }
      }
    }
  },
  "classes": [
    {
      "name": "Collection",
      "description": "<p>A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\nan ID, for significantly improved performance and ease-of-use.</p>",
      "extends": [[["Map"]]],
      "props": [
        {
          "name": "_array",
          "description": "<p>Cached array for the <code>array()</code> method - will be reset to <code>null</code> whenever <code>set()</code> or <code>delete()</code> are called</p>",
          "access": "private",
          "nullable": true,
          "type": [[["Array"]]],
          "meta": { "line": 18, "file": "index.ts", "path": "src" }
        },
        {
          "name": "_keyArray",
          "description": "<p>Cached array for the <code>keyArray()</code> method - will be reset to <code>null</code> whenever <code>set()</code> or <code>delete()</code> are called</p>",
          "access": "private",
          "nullable": true,
          "type": [[["Array"]]],
          "meta": { "line": 30, "file": "index.ts", "path": "src" }
        }
      ],
      "methods": [
        {
          "name": "array",
          "description": "<p>Creates an ordered array of the values of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behavior, use <code>[...collection.values()]</code> or\n<code>Array.from(collection.values())</code> instead.</p>",
          "returns": [[["Array"]]],
          "meta": { "line": 64, "file": "index.ts", "path": "src" }
        },
        {
          "name": "keyArray",
          "description": "<p>Creates an ordered array of the keys of this collection, and caches it internally. The array will only be\nreconstructed if an item is added to or removed from the collection, or if you change the length of the array\nitself. If you don't want this caching behavior, use <code>[...collection.keys()]</code> or\n<code>Array.from(collection.keys())</code> instead.</p>",
          "returns": [[["Array"]]],
          "meta": { "line": 77, "file": "index.ts", "path": "src" }
        },
        {
          "name": "first",
          "description": "<p>Obtains the first value(s) in this collection.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of values to obtain from the beginning</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single value if no amount is provided or an array of values, starting from the end if\namount is negative</p>"
          },
          "meta": { "line": 89, "file": "index.ts", "path": "src" }
        },
        {
          "name": "firstKey",
          "description": "<p>Obtains the first key(s) in this collection.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of keys to obtain from the beginning</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single key if no amount is provided or an array of keys, starting from the end if\namount is negative</p>"
          },
          "meta": { "line": 106, "file": "index.ts", "path": "src" }
        },
        {
          "name": "last",
          "description": "<p>Obtains the last value(s) in this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of values to obtain from the end</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single value if no amount is provided or an array of values, starting from the start if\namount is negative</p>"
          },
          "meta": { "line": 124, "file": "index.ts", "path": "src" }
        },
        {
          "name": "lastKey",
          "description": "<p>Obtains the last key(s) in this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of keys to obtain from the end</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single key if no amount is provided or an array of keys, starting from the start if\namount is negative</p>"
          },
          "meta": { "line": 140, "file": "index.ts", "path": "src" }
        },
        {
          "name": "random",
          "description": "<p>Obtains unique random value(s) from this collection. This relies on {@link Collection#array}, and thus the caching\nmechanism applies here as well.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of values to obtain randomly</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single value if no amount is provided or an array of values</p>"
          },
          "meta": { "line": 155, "file": "index.ts", "path": "src" }
        },
        {
          "name": "randomKey",
          "description": "<p>Obtains unique random key(s) from this collection. This relies on {@link Collection#keyArray}, and thus the caching\nmechanism applies here as well.</p>",
          "params": [
            {
              "name": "amount",
              "description": "<p>Amount of keys to obtain randomly</p>",
              "optional": true,
              "type": [[["number"]]]
            }
          ],
          "returns": {
            "types": [
              ["*"],
              [
                ["Array", "<"],
                ["*", ">"]
              ]
            ],
            "description": "<p>A single key if no amount is provided or an array</p>"
          },
          "meta": { "line": 172, "file": "index.ts", "path": "src" }
        },
        {
          "name": "find",
          "description": "<p>Searches for a single item where the given function returns a truthy value. This behaves like\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">Array.find()</a>.\n<warn>All collections used in Discord.js are mapped using their <code>id</code> property, and if you want to find by id you\nshould use the <code>get</code> method. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get\">MDN</a> for details.</warn></p>",
          "examples": ["collection.find(user => user.username === 'Bob');"],
          "params": [
            {
              "name": "fn",
              "description": "<p>The function to test with (should return boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [["*"]],
          "meta": { "line": 194, "file": "index.ts", "path": "src" }
        },
        {
          "name": "findKey",
          "description": "<p>Searches for the key of a single item where the given function returns a truthy value. This behaves like\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex\">Array.findIndex()</a>,\nbut returns the key rather than the positional index.</p>",
          "examples": ["collection.findKey(user => user.username === 'Bob');"],
          "params": [
            {
              "name": "fn",
              "description": "<p>The function to test with (should return boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [["*"]],
          "meta": { "line": 214, "file": "index.ts", "path": "src" }
        },
        {
          "name": "sweep",
          "description": "<p>Removes entries that satisfy the provided filter function.</p>",
          "params": [
            {
              "name": "fn",
              "description": "<p>Function used to test (should return a boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": {
            "types": [[["number"]]],
            "description": "<p>The number of removed entries</p>"
          },
          "meta": { "line": 231, "file": "index.ts", "path": "src" }
        },
        {
          "name": "filter",
          "description": "<p>Identical to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.filter()</a>,\nbut returns a Collection instead of an Array.</p>",
          "examples": ["collection.filter(user => user.username === 'Bob');"],
          "params": [
            {
              "name": "fn",
              "description": "<p>The function to test with (should return boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 252, "file": "index.ts", "path": "src" }
        },
        {
          "name": "partition",
          "description": "<p>Partitions the collection into two collections where the first collection\ncontains the items that passed and the second contains the items that failed.</p>",
          "examples": [
            "const [big, small] = collection.partition(guild => guild.memberCount > 250);"
          ],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function used to test (should return a boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [
            [
              ["Array", "<"],
              ["Collection", ">"]
            ]
          ],
          "meta": { "line": 272, "file": "index.ts", "path": "src" }
        },
        {
          "name": "flatMap",
          "description": "<p>Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\">Array.flatMap()</a>.</p>",
          "examples": ["collection.flatMap(guild => guild.members);"],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function that produces a new Collection</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 297, "file": "index.ts", "path": "src" }
        },
        {
          "name": "map",
          "description": "<p>Maps each item to another value into an array. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map()</a>.</p>",
          "examples": ["collection.map(user => user.tag);"],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function that produces an element of the new array, taking three arguments</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Array"]]],
          "meta": { "line": 311, "file": "index.ts", "path": "src" }
        },
        {
          "name": "mapValues",
          "description": "<p>Maps each item to another value into a collection. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map()</a>.</p>",
          "examples": ["collection.mapValues(user => user.tag);"],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function that produces an element of the new collection, taking three arguments</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 331, "file": "index.ts", "path": "src" }
        },
        {
          "name": "some",
          "description": "<p>Checks if there exists an item that passes a test. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.some()</a>.</p>",
          "examples": [
            "collection.some(user => user.discriminator === '0000');"
          ],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function used to test (should return a boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["boolean"]]],
          "meta": { "line": 349, "file": "index.ts", "path": "src" }
        },
        {
          "name": "every",
          "description": "<p>Checks if all items passes a test. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every\">Array.every()</a>.</p>",
          "examples": ["collection.every(user => !user.bot);"],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function used to test (should return a boolean)</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["boolean"]]],
          "meta": { "line": 368, "file": "index.ts", "path": "src" }
        },
        {
          "name": "reduce",
          "description": "<p>Applies a function to produce a single value. Identical in behavior to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array.reduce()</a>.</p>",
          "examples": [
            "collection.reduce((acc, guild) => acc + guild.memberCount, 0);"
          ],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function used to reduce, taking four arguments; <code>accumulator</code>, <code>currentValue</code>, <code>currentKey</code>,\nand <code>collection</code></p>",
              "type": [[["function"]]]
            },
            {
              "name": "initialValue",
              "description": "<p>Starting value for the accumulator</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [["*"]],
          "meta": { "line": 388, "file": "index.ts", "path": "src" }
        },
        {
          "name": "each",
          "description": "<p>Identical to\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\">Map.forEach()</a>,\nbut returns the collection instead of undefined.</p>",
          "examples": [
            "collection\n .each(user => console.log(user.username))\n .filter(user => user.bot)\n .each(user => console.log(user.username));"
          ],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function to execute for each element</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 433, "file": "index.ts", "path": "src" }
        },
        {
          "name": "tap",
          "description": "<p>Runs a function on the collection and returns the collection.</p>",
          "examples": [
            "collection\n .tap(coll => console.log(coll.size))\n .filter(user => user.bot)\n .tap(coll => console.log(coll.size))"
          ],
          "params": [
            {
              "name": "fn",
              "description": "<p>Function to execute</p>",
              "type": [[["function"]]]
            },
            {
              "name": "thisArg",
              "description": "<p>Value to use as <code>this</code> when executing function</p>",
              "optional": true,
              "type": [["*"]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 450, "file": "index.ts", "path": "src" }
        },
        {
          "name": "clone",
          "description": "<p>Creates an identical shallow copy of this collection.</p>",
          "examples": ["const newColl = someColl.clone();"],
          "returns": [[["Collection"]]],
          "meta": { "line": 462, "file": "index.ts", "path": "src" }
        },
        {
          "name": "concat",
          "description": "<p>Combines this collection with others into a new collection. None of the source collections are modified.</p>",
          "examples": [
            "const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);"
          ],
          "params": [
            {
              "name": "collections",
              "description": "<p>Collections to merge</p>",
              "variable": true,
              "type": [[["Collection"]]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 473, "file": "index.ts", "path": "src" }
        },
        {
          "name": "equals",
          "description": "<p>Checks if this collection shares identical key-value pairings with another.\nThis is different to checking for equality using equal-signs, because\nthe collections may be different objects, but contain the same data.</p>",
          "params": [
            {
              "name": "collection",
              "description": "<p>Collection to compare with</p>",
              "type": [[["Collection"]]]
            }
          ],
          "returns": {
            "types": [[["boolean"]]],
            "description": "<p>Whether the collections have identical contents</p>"
          },
          "meta": { "line": 491, "file": "index.ts", "path": "src" }
        },
        {
          "name": "sort",
          "description": "<p>The sort method sorts the elements of a collection in place and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.</p>",
          "examples": [
            "collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"
          ],
          "params": [
            {
              "name": "compareFunction",
              "description": "<p>Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.</p>",
              "optional": true,
              "type": [[["function"]]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 515, "file": "index.ts", "path": "src" }
        },
        {
          "name": "sorted",
          "description": "<p>The sorted method sorts the elements of a collection and returns it.\nThe sort is not necessarily stable. The default sort order is according to string Unicode code points.</p>",
          "examples": [
            "collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);"
          ],
          "params": [
            {
              "name": "compareFunction",
              "description": "<p>Specifies a function that defines the sort order.\nIf omitted, the collection is sorted according to each character's Unicode code point value,\naccording to the string conversion of each element.</p>",
              "optional": true,
              "type": [[["function"]]]
            }
          ],
          "returns": [[["Collection"]]],
          "meta": { "line": 537, "file": "index.ts", "path": "src" }
        }
      ],
      "meta": { "line": 16, "file": "index.ts", "path": "src" }
    }
  ],
  "interfaces": [],
  "typedefs": [],
  "externals": []
}
